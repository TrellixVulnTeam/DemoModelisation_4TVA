{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"EEW_modeleconso_vs_TDMipynb","provenance":[{"file_id":"1BrLOCgXpeEZVWs_FkN53HSQDBhs2yfge","timestamp":1589530701638}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"t3A6O4Q1aopc","colab_type":"text"},"source":["##Lecture des données"]},{"cell_type":"code","metadata":{"id":"RszZnY6xJc3o","colab_type":"code","colab":{}},"source":["import pandas as pd\n","\n","f_eveler = \"/content/drive/My Drive/EEW/Data/eveler/narbonne_mars2020.pkl\"\n","f_lerne  = \"/content/drive/My Drive/EEW/Data/lerne/narbonne_2020-03.csv\"\n","\n","\n","\n","\n","df_eveler = pd.read_pickle(f_eveler)\n","\n","df_lerne = pd.read_csv(f_lerne,sep = \",\",low_memory = False)\n","df_lerne.drop_duplicates(inplace=True)\n","df_lerne.sort_values(by=['mesure_date_val'],inplace=True)\n","df_lerne.index = range(len(df_lerne))\n","df_lerne = df_lerne.pivot_table(index='mesure_date_val',columns='equipement_nom',values='mesure_value')\n","df_lerne.index = pd.to_datetime(df_lerne.index,format=\"%Y-%m-%d %H:%M:%S %Z\")\n","\n","\n","\n","\n","# Consommation journalière en kWh/jour Eveler\n","\n","#df_eveler_conso_jour = df_eveler['P_ACT_KW'].resample('D').mean()*24\n","# somme des consommations du sous-comptage\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UbGw53LidUAX","colab_type":"text"},"source":["## Temps de marche au pas de temps horaire"]},{"cell_type":"code","metadata":{"id":"Ej6K8HbgdY_T","colab_type":"code","colab":{}},"source":["import sys\n","sys.path.append(\"/content/drive/My Drive/EEW\")\n","import imp\n","import Function_sous_comptage_func \n","imp.reload(Function_sous_comptage_func)\n","\n","from Function_sous_comptage_func import Compute_Equi_TDM_Lerne\n","Periode = '1H' # Fréquence d'aggrégation des résultats\n","label_MA = [l for l in df_lerne.columns if l.startswith(\"M_\")]\n","# Temps de fonctionnement en heure\n","Equip_Work_Time = Compute_Equi_TDM_Lerne(df_lerne, label_MA, periode = Periode)\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GMFDqS-ifzoO","colab_type":"text"},"source":["## Fusion données Eveler et TDM"]},{"cell_type":"code","metadata":{"id":"mKQRG-rXf7Lm","colab_type":"code","colab":{}},"source":["# Consommation horaire en kWh Eveler\n","\n","df_eveler_conso_heure = df_eveler.resample('H').mean()\n","df_eveler_conso_heure.drop([df_eveler_conso_heure.index[0],df_eveler_conso_heure.index[-1]],inplace=True)\n","\n","\n","data = df_eveler_conso_heure.merge(Equip_Work_Time, how='outer', left_index = True, right_index = True)\n","\n","data.drop(columns=\"P_REACT_KVAR_POSITIVE\", inplace=True)\n","data.dropna(inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SeanAfsakLxE","colab_type":"code","colab":{}},"source":["X_TDM = data.drop(columns='P_ACT_KW').values\n","Y_CONSO = data['P_ACT_KW'].values"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yCSF1ERHqMl-","colab_type":"text"},"source":["## Ridge regression with feature normalization"]},{"cell_type":"code","metadata":{"id":"o-MmBNtoqLhr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":578},"outputId":"a21e7101-6126-4b35-b776-17753dc87aaf","executionInfo":{"status":"ok","timestamp":1589535566613,"user_tz":-120,"elapsed":1232,"user":{"displayName":"david mouquet","photoUrl":"","userId":"09270911150184946710"}}},"source":["from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","from sklearn.linear_model import Ridge\n","X_train, X_test, y_train, y_test = train_test_split(X_TDM, Y_CONSO,\n","                                                   random_state = 0)\n","\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","for alpha in [0,0.001, 0.1, 0.5,1,2, 3, 5, 10, 20, 50]:\n","\n","  linridge = Ridge(alpha=alpha).fit(X_train_scaled, y_train)\n","\n","\n","#print('ridge regression linear model intercept: {}'\n","#     .format(linridge.intercept_))\n","#print('ridge regression linear model coeff:\\n{}'\n","#     .format(linridge.coef_))\n","  print('R-squared score (training): {:.3f}'\n","      .format(linridge.score(X_train_scaled, y_train)))\n","  print('R-squared score (test): {:.3f}'\n","      .format(linridge.score(X_test_scaled, y_test)))\n","  print('Number of non-zero features: {}'\n","      .format(np.sum(linridge.coef_ != 0)))"],"execution_count":36,"outputs":[{"output_type":"stream","text":["R-squared score (training): 0.931\n","R-squared score (test): -46.024\n","Number of non-zero features: 53\n","R-squared score (training): 0.931\n","R-squared score (test): 0.818\n","Number of non-zero features: 53\n","R-squared score (training): 0.930\n","R-squared score (test): 0.825\n","Number of non-zero features: 53\n","R-squared score (training): 0.927\n","R-squared score (test): 0.829\n","Number of non-zero features: 53\n","R-squared score (training): 0.924\n","R-squared score (test): 0.829\n","Number of non-zero features: 53\n","R-squared score (training): 0.918\n","R-squared score (test): 0.826\n","Number of non-zero features: 53\n","R-squared score (training): 0.911\n","R-squared score (test): 0.821\n","Number of non-zero features: 53\n","R-squared score (training): 0.897\n","R-squared score (test): 0.807\n","Number of non-zero features: 53\n","R-squared score (training): 0.862\n","R-squared score (test): 0.770\n","Number of non-zero features: 53\n","R-squared score (training): 0.807\n","R-squared score (test): 0.716\n","Number of non-zero features: 53\n","R-squared score (training): 0.716\n","R-squared score (test): 0.632\n","Number of non-zero features: 53\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aMJfGFMEo4zc","colab_type":"text"},"source":["## Regression Lasso"]},{"cell_type":"code","metadata":{"id":"709nm6Wljm5s","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":272},"outputId":"1286b84f-d0be-462d-f6cc-dff86ca735e6","executionInfo":{"status":"ok","timestamp":1589533583645,"user_tz":-120,"elapsed":1398,"user":{"displayName":"david mouquet","photoUrl":"","userId":"09270911150184946710"}}},"source":["from sklearn.linear_model import Lasso\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","scaler = MinMaxScaler()\n","\n","X_train, X_test, y_train, y_test = train_test_split(X_TDM, Y_CONSO,\n","                                                   random_state = 0)\n","\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","linlasso = Lasso(alpha=2.0, max_iter = 10000).fit(X_train_scaled, y_train)\n","\n","\n","print('lasso regression linear model intercept: {}'\n","     .format(linlasso.intercept_))\n","print('lasso regression linear model coeff:\\n{}'\n","     .format(linlasso.coef_))\n","print('Non-zero features: {}'\n","     .format(np.sum(linlasso.coef_ != 0)))\n","print('R-squared score (training): {:.3f}'\n","     .format(linlasso.score(X_train_scaled, y_train)))\n","print('R-squared score (test): {:.3f}\\n'\n","     .format(linlasso.score(X_test_scaled, y_test)))"],"execution_count":30,"outputs":[{"output_type":"stream","text":["lasso regression linear model intercept: 163.14812369981254\n","lasso regression linear model coeff:\n","[ 0.          0.          0.          0.         -0.         -0.\n","  0.         -0.          0.          0.          0.          0.\n","  0.          0.          0.         34.50968808  0.          0.\n","  0.          0.          0.          0.          0.         -0.\n","  0.          0.          0.82403281  0.         -0.          0.\n","  7.77131643 -2.02172502 -0.          0.          0.          0.\n","  0.          0.          0.         40.71843235  0.          0.\n","  0.         21.45352042  0.          0.          3.07664335  0.\n"," 14.08240315  0.          0.         32.50847927  0.        ]\n","Non-zero features: 9\n","R-squared score (training): 0.618\n","R-squared score (test): 0.519\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OQnDM-zcomDa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":527},"outputId":"1d81f8cc-56d5-46cf-d304-e4bb7d02a31c","executionInfo":{"status":"ok","timestamp":1589534542723,"user_tz":-120,"elapsed":1173,"user":{"displayName":"david mouquet","photoUrl":"","userId":"09270911150184946710"}}},"source":["for alpha in [0.01, 0.1, 0.5,1,2, 3, 5, 10, 20, 50]:\n","    linlasso = Lasso(alpha, max_iter = 10000).fit(X_train_scaled, y_train)\n","    r2_train = linlasso.score(X_train_scaled, y_train)\n","    r2_test = linlasso.score(X_test_scaled, y_test)\n","    \n","    print('Alpha = {:.2f}\\nFeatures kept: {}, r-squared training: {:.2f}, \\\n","r-squared test: {:.2f}\\n'\n","         .format(alpha, np.sum(linlasso.coef_ != 0), r2_train, r2_test))"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Alpha = 0.01\n","Features kept: 43, r-squared training: 0.93, r-squared test: 0.82\n","\n","Alpha = 0.10\n","Features kept: 28, r-squared training: 0.92, r-squared test: 0.82\n","\n","Alpha = 0.50\n","Features kept: 19, r-squared training: 0.88, r-squared test: 0.79\n","\n","Alpha = 1.00\n","Features kept: 14, r-squared training: 0.79, r-squared test: 0.70\n","\n","Alpha = 2.00\n","Features kept: 9, r-squared training: 0.62, r-squared test: 0.52\n","\n","Alpha = 3.00\n","Features kept: 5, r-squared training: 0.53, r-squared test: 0.46\n","\n","Alpha = 5.00\n","Features kept: 4, r-squared training: 0.42, r-squared test: 0.39\n","\n","Alpha = 10.00\n","Features kept: 1, r-squared training: 0.23, r-squared test: 0.21\n","\n","Alpha = 20.00\n","Features kept: 0, r-squared training: 0.00, r-squared test: -0.00\n","\n","Alpha = 50.00\n","Features kept: 0, r-squared training: 0.00, r-squared test: -0.00\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jP3VAb9Oa1Ol","colab_type":"code","outputId":"67c33546-94f4-4082-cee6-a0b4c18b0511","executionInfo":{"status":"ok","timestamp":1589530850249,"user_tz":-120,"elapsed":36506,"user":{"displayName":"david mouquet","photoUrl":"","userId":"09270911150184946710"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uMya0eOIoPDF","colab_type":"code","outputId":"18db3bf0-4a4c-4159-8505-2f7daea06a7c","executionInfo":{"status":"ok","timestamp":1589266883057,"user_tz":-120,"elapsed":863,"user":{"displayName":"david mouquet","photoUrl":"","userId":"09270911150184946710"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["df_eveler_conso_jour.sum()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["169342.36956521738"]},"metadata":{"tags":[]},"execution_count":15}]}]}